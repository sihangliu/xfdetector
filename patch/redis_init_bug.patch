diff --git a/src/Makefile b/src/Makefile
index c5f67870..176b5f12 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -119,6 +119,11 @@ endif
 	FINAL_LIBS+= -ldl
 endif
 
+TOP = $(shell pwd)
+FINAL_LIBS+= -L$(TOP)/../../xfdetector/build/lib -Wl,-rpath=$(TOP)/../../xfdetector/build/lib -lxfdetector_interface
+FINAL_CFLAGS+= -I$(TOP)/../../xfdetector/include
+CFLAGS+= -Bstatic
+
 REDIS_CC=$(QUIET_CC)$(CC) $(FINAL_CFLAGS)
 REDIS_LD=$(QUIET_LINK)$(CC) $(FINAL_LDFLAGS)
 REDIS_INSTALL=$(QUIET_INSTALL)$(INSTALL)
diff --git a/src/pmem.c b/src/pmem.c
index 5e9e045d..4762e9b6 100644
--- a/src/pmem.c
+++ b/src/pmem.c
@@ -32,6 +32,7 @@
 #include "obj.h"
 #include "libpmemobj.h"
 #include "util.h"
+#include "../../xfdetector/include/xfdetector_interface.h"
 
 int
 pmemReconstruct(void)
@@ -55,6 +56,7 @@ pmemReconstruct(void)
 
         (void)dictAddReconstructedPM(d, key, val);
     }
+    XFDetector_addFailurePoint(1);
     return C_OK;
 }
 
diff --git a/src/server.c b/src/server.c
index eea72af4..a3ec3079 100644
--- a/src/server.c
+++ b/src/server.c
@@ -55,6 +55,8 @@
 #include <locale.h>
 #include <sys/socket.h>
 
+#include "../../xfdetector/include/xfdetector_interface.h"
+
 /* Our shared "common" objects */
 
 struct sharedObjectsStruct shared;
@@ -2677,6 +2679,9 @@ int prepareForShutdown(int flags) {
     closeListeningSockets(1);
     serverLog(LL_WARNING,"%s is now ready to exit, bye bye...",
         server.sentinel_mode ? "Sentinel" : "Redis");
+
+    XFDetector_RoIEnd(1, POST_FAILURE|PRE_FAILURE);
+    XFDetector_complete(1,POST_FAILURE|PRE_FAILURE);
     return C_OK;
 }
 
@@ -4013,21 +4018,27 @@ void initPersistentMemory(void) {
     server.pm_pool = pmemobj_create(server.pm_file_path, PM_LAYOUT_NAME, server.pm_file_size, 0666);
 
     if (server.pm_pool == NULL) {
+        XFDetector_RoIBegin(1, PRE_FAILURE | POST_FAILURE);
+
         /* Open the existing PMEM pool file. */
         server.pm_pool = pmemobj_open(server.pm_file_path, PM_LAYOUT_NAME);
         server.pm_rootoid = POBJ_ROOT(server.pm_pool, struct redis_pmem_root);
 	server.pm_reconstruct_required = true;
 
         if (server.pm_pool == NULL) {
+
             serverLog(LL_WARNING,"Cannot init persistent memory poolset file "
                 "%s size %s", server.pm_file_path, pmfile_hmem);
             exit(1);
         }
     } else {
+        XFDetector_RoIBegin(1, PRE_FAILURE | POST_FAILURE);
+
         server.pm_rootoid = POBJ_ROOT(server.pm_pool, struct redis_pmem_root);
         root = pmemobj_direct(server.pm_rootoid.oid);
         root->num_dict_entries = 0;
     }
+    XFDetector_addFailurePoint(1);
 
     /* Get pool UUID from root object's OID. */
     oid = pmemobj_root(server.pm_pool, 1);
