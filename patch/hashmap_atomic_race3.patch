diff --git a/src/examples/libpmemobj/hashmap/hashmap_atomic.c b/src/examples/libpmemobj/hashmap/hashmap_atomic.c
index 4e137d40a..88677941c 100644
--- a/src/examples/libpmemobj/hashmap/hashmap_atomic.c
+++ b/src/examples/libpmemobj/hashmap/hashmap_atomic.c
@@ -250,8 +250,6 @@ int
 hm_atomic_insert(PMEMobjpool *pop, TOID(struct hashmap_atomic) hashmap,
 		uint64_t key, PMEMoid value)
 {
-	PMRace_addCommitVar(&D_RW(hashmap)->count_dirty, sizeof(D_RW(hashmap)->count_dirty));
-	//fprintf(stderr ,"adding commit var\n");
 	TOID(struct buckets) buckets = D_RO(hashmap)->buckets;
 	TOID(struct entry) var;
 
@@ -457,7 +455,7 @@ hm_atomic_init(PMEMobjpool *pop, TOID(struct hashmap_atomic) hashmap)
 {
 	srand(D_RO(hashmap)->seed);
 
-	//fprintf(stderr ,"Initing\n");
+	PMRace_addCommitVar(&D_RO(hashmap)->count_dirty, sizeof(D_RO(hashmap)->count_dirty));
 	//PMRace_addCommitVar(&D_RO(hashmap)->count, sizeof(D_RO(hashmap)->count));
 
 	/* handle rebuild interruption */
@@ -496,8 +494,9 @@ hm_atomic_init(PMEMobjpool *pop, TOID(struct hashmap_atomic) hashmap)
 		printf("old count: %" PRIu64 ", new count: %" PRIu64 "\n",
 			D_RO(hashmap)->count, cnt);
 		D_RW(hashmap)->count = cnt;
-		pmemobj_persist(pop, &D_RW(hashmap)->count,
-				sizeof(D_RW(hashmap)->count));
+		// BUG: Missing persist
+		// pmemobj_persist(pop, &D_RW(hashmap)->count,
+		// 		sizeof(D_RW(hashmap)->count));
 
 		D_RW(hashmap)->count_dirty = 0;
 		pmemobj_persist(pop, &D_RW(hashmap)->count_dirty,
