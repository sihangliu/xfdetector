diff --git a/src/examples/libpmemobj/hashmap/hashmap_atomic.c b/src/examples/libpmemobj/hashmap/hashmap_atomic.c
index 4e137d40a..36c561b42 100644
--- a/src/examples/libpmemobj/hashmap/hashmap_atomic.c
+++ b/src/examples/libpmemobj/hashmap/hashmap_atomic.c
@@ -208,9 +208,11 @@ hm_atomic_rebuild_finish(PMEMobjpool *pop, TOID(struct hashmap_atomic) hashmap)
 	 * should use transaction API.
 	 * See recovery process in hm_init and TOID_IS_NULL macro definition.
 	 */
-	D_RW(hashmap)->buckets_tmp.oid.off = 0;
+	// BUG: Persist before update
 	pmemobj_persist(pop, &D_RW(hashmap)->buckets_tmp,
 			sizeof(D_RW(hashmap)->buckets_tmp));
+
+	D_RW(hashmap)->buckets_tmp.oid.off = 0;
 }
 
 /*
@@ -250,8 +252,6 @@ int
 hm_atomic_insert(PMEMobjpool *pop, TOID(struct hashmap_atomic) hashmap,
 		uint64_t key, PMEMoid value)
 {
-	PMRace_addCommitVar(&D_RW(hashmap)->count_dirty, sizeof(D_RW(hashmap)->count_dirty));
-	//fprintf(stderr ,"adding commit var\n");
 	TOID(struct buckets) buckets = D_RO(hashmap)->buckets;
 	TOID(struct entry) var;
 
@@ -457,7 +457,7 @@ hm_atomic_init(PMEMobjpool *pop, TOID(struct hashmap_atomic) hashmap)
 {
 	srand(D_RO(hashmap)->seed);
 
-	//fprintf(stderr ,"Initing\n");
+	PMRace_addCommitVar(&D_RO(hashmap)->count_dirty, sizeof(D_RO(hashmap)->count_dirty));
 	//PMRace_addCommitVar(&D_RO(hashmap)->count, sizeof(D_RO(hashmap)->count));
 
 	/* handle rebuild interruption */
