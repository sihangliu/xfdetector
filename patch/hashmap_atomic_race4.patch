diff --git a/src/examples/libpmemobj/hashmap/hashmap_atomic.c b/src/examples/libpmemobj/hashmap/hashmap_atomic.c
index 4e137d40a..c5a653d24 100644
--- a/src/examples/libpmemobj/hashmap/hashmap_atomic.c
+++ b/src/examples/libpmemobj/hashmap/hashmap_atomic.c
@@ -250,8 +250,6 @@ int
 hm_atomic_insert(PMEMobjpool *pop, TOID(struct hashmap_atomic) hashmap,
 		uint64_t key, PMEMoid value)
 {
-	XFDetector_addCommitVar(&D_RW(hashmap)->count_dirty, sizeof(D_RW(hashmap)->count_dirty));
-	//fprintf(stderr ,"adding commit var\n");
 	TOID(struct buckets) buckets = D_RO(hashmap)->buckets;
 	TOID(struct entry) var;
 
@@ -457,7 +455,7 @@ hm_atomic_init(PMEMobjpool *pop, TOID(struct hashmap_atomic) hashmap)
 {
 	srand(D_RO(hashmap)->seed);
 
-	//fprintf(stderr ,"Initing\n");
+	XFDetector_addCommitVar(&D_RO(hashmap)->count_dirty, sizeof(D_RO(hashmap)->count_dirty));
 	//XFDetector_addCommitVar(&D_RO(hashmap)->count, sizeof(D_RO(hashmap)->count));
 
 	/* handle rebuild interruption */
@@ -475,8 +473,9 @@ hm_atomic_init(PMEMobjpool *pop, TOID(struct hashmap_atomic) hashmap)
 					sizeof(D_RW(hashmap)->buckets));
 			/* see comment in hm_rebuild_finish */
 			D_RW(hashmap)->buckets_tmp.oid.off = 0;
-			pmemobj_persist(pop, &D_RW(hashmap)->buckets_tmp,
-					sizeof(D_RW(hashmap)->buckets_tmp));
+			// BUG: Missing persist
+			// pmemobj_persist(pop, &D_RW(hashmap)->buckets_tmp,
+			// 		sizeof(D_RW(hashmap)->buckets_tmp));
 		} else {
 			hm_atomic_rebuild_finish(pop, hashmap);
 		}
