diff --git a/src/examples/libpmemobj/hashmap/hashmap_atomic.c b/src/examples/libpmemobj/hashmap/hashmap_atomic.c
index 4e137d40a..0a6bd5e3e 100644
--- a/src/examples/libpmemobj/hashmap/hashmap_atomic.c
+++ b/src/examples/libpmemobj/hashmap/hashmap_atomic.c
@@ -142,6 +142,9 @@ create_hashmap(PMEMobjpool *pop, TOID(struct hashmap_atomic) hashmap,
 	size_t len = INIT_BUCKETS_NUM;
 	size_t sz = sizeof(struct buckets) +
 			len * sizeof(struct entries_head);
+	
+	// BUG: persist clean data
+	pmemobj_persist(pop, D_RW(hashmap), sizeof(*D_RW(hashmap)));
 
 	if (POBJ_ALLOC(pop, &D_RW(hashmap)->buckets, struct buckets, sz,
 			create_buckets, &len)) {
@@ -250,8 +253,6 @@ int
 hm_atomic_insert(PMEMobjpool *pop, TOID(struct hashmap_atomic) hashmap,
 		uint64_t key, PMEMoid value)
 {
-	PMRace_addCommitVar(&D_RW(hashmap)->count_dirty, sizeof(D_RW(hashmap)->count_dirty));
-	//fprintf(stderr ,"adding commit var\n");
 	TOID(struct buckets) buckets = D_RO(hashmap)->buckets;
 	TOID(struct entry) var;
 
@@ -457,7 +458,7 @@ hm_atomic_init(PMEMobjpool *pop, TOID(struct hashmap_atomic) hashmap)
 {
 	srand(D_RO(hashmap)->seed);
 
-	//fprintf(stderr ,"Initing\n");
+	PMRace_addCommitVar(&D_RO(hashmap)->count_dirty, sizeof(D_RO(hashmap)->count_dirty));
 	//PMRace_addCommitVar(&D_RO(hashmap)->count, sizeof(D_RO(hashmap)->count));
 
 	/* handle rebuild interruption */
